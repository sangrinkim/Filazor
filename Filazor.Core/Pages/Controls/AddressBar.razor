@using System.IO 

<div class="input-group input-group-sm">
    <input type="text" class="form-control" id="address" value="@addressText" onfocus="this.select();" @onchange="AddressChanged"/>
    <div class="input-group-append">
        <button class="btn btn-sm btn-outline-secondary" type="button" id="refresh" @onclick="Refresh">
            <i class="material-icons align-middle">
                refresh
            </i>
        </button>
    </div>
</div>

<ModalDialog Title="Notice" Show="showFailDialog" Message="@dialogMessage" />


@code {

    private string hostName;
    private string addressText;
    private string currentPath;
    private bool showFailDialog = false;
    private string dialogMessage;

    [Parameter]
    public string HostName
    {
        get
        {
            return hostName;
        }
        set
        {
            hostName = value;
            addressText = $"{HostName} > {CurrentPath}";
        }
    }

    [Parameter]
    public string CurrentPath
    {
        get
        {
            return currentPath;
        }
        set
        {
            currentPath = value;
            if (string.IsNullOrEmpty(currentPath))
            {
                addressText = HostName;
            }
            else
            {
                addressText = $"{HostName} > {CurrentPath}";
            }
        }
    }

    [Parameter]
    public EventCallback<string> AddressChangedCallback { get; set; }


    private async void AddressChanged(ChangeEventArgs args)
    {
        RaiseEvent(args.Value.ToString());
    }

    private async void Refresh()
    {
        RaiseEvent(CurrentPath);
    }


    private async void RaiseEvent(string path)
    {
        path = path.Replace(HostName, "");
        path = path.Replace(" > ", "");

        if (string.IsNullOrEmpty(path) == false && !Directory.Exists(path))
        {
            dialogMessage = $"Can not find '{path}'. Make sure you typed the name correctly, and then try again.";
            showFailDialog = true;

            return;
        }

        if (AddressChangedCallback.HasDelegate)
        {
            await AddressChangedCallback.InvokeAsync(path);
        }
    }
}
